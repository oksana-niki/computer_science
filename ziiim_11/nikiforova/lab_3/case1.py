"""
### 3.3.1. –ó–∞–¥–∞—á–∞ 1: "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –º–∞—Ç—Ä–∏—Ü –≤ numpy"

–°–æ–∑–¥–∞–π—Ç–µ –¥–≤–µ –º–∞—Ç—Ä–∏—Ü—ã –ø–æ —Ñ–æ—Ä–º—É–ª–∞–º,
–≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å —Ç–∏–ø–æ–º ¬´numpy.array(some_list)¬ª –∏
–∫–æ–º–∞–Ω–¥–æ–π ¬´numpy.fromfunction(function)¬ª, –¥–ª—è –Ω–∏—Ö –≤—ã—á–∏—Å–ª–∏—Ç–µ:

- –í—ã—á–∏—Å–ª–∏—Ç–µ A·µÄ –∏ B·µÄ;
- –í—ã—á–∏—Å–ª–∏—Ç–µ A + B;
- –í—ã—á–∏—Å–ª–∏—Ç–µ A - B;
- –í—ã—á–∏—Å–ª–∏—Ç–µ A * B –∏ B * A;
- –í—ã—á–∏—Å–ª–∏—Ç–µ A / B –∏ B / A;
- –í—ã—á–∏—Å–ª–∏—Ç–µ A // B –∏ B // A;
- –í—ã—á–∏—Å–ª–∏—Ç–µ A‚Åª¬π –∏ B‚Åª¬π;
- –í—ã—á–∏—Å–ª–∏—Ç–µ A * B‚Åª¬π –∏ B * A‚Åª¬π;
- –í—ã—á–∏—Å–ª–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ 2A·µÄ - E, –≥–¥–µ E ‚Äî –µ–¥–∏–Ω–∏—á–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞, —Ä–∞–∑–º–µ—Ä–∞ MxN, –ø—Ä–∏ —Ç–æ–º,
—á—Ç–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –º–∞—Ç—Ä–∏—Ü–∞ A –∏–º–µ–µ—Ç —Ä–∞–∑–º–µ—Ä NxM.
- –í—ã—á–∏—Å–ª–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ ùëì(ùë•) = ùë•¬≥ ‚àí 7ùë•¬≤ + 13ùë• ‚àí 5, –µ—Å–ª–∏ ùë• ‚Äî —ç—Ç–æ –º–∞—Ç—Ä–∏—Ü—ã A –∏ B;
- –í—ã—á–∏—Å–ª–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ 1 –∏ —Ñ—É–Ω–∫—Ü–∏–∏ 2 –∏–∑ –¢–∞–±–ª–∏—Ü—ã 2 –¥–ª—è –º–∞—Ç—Ä–∏—Ü A –∏ B;
- –í—ã—á–∏—Å–ª–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ 3 –∏–∑ –¢–∞–±–ª–∏—Ü—ã 2, –ø—Ä–∏–Ω—è–≤ —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
¬´—É¬ª ‚Äî —ç—Ç–æ –º–∞—Ç—Ä–∏—Ü–∞ A, –∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è ¬´ùë•ùë•¬ª ‚Äî —ç—Ç–æ –º–∞—Ç—Ä–∏—Ü–∞ B;

–ü—Ä–∏ —ç—Ç–æ–º —É—á—Ç–∏—Ç–µ, —á—Ç–æ –∑–¥–µ—Å—å –∑–Ω–∞–∫ ¬´*¬ª –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç –º–∞—Ç—Ä–∏—á–Ω–æ–µ —É–º–Ω–æ–∂–µ–Ω–∏–µ,
–∞ –Ω–µ –ø–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ–µ.
"""
# -*- coding: utf-8 -*-

import numpy as np
import math

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
np.set_printoptions(precision=3, suppress=True)

# ---------- –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü A –∏ B –ø–æ —Ñ–æ—Ä–º—É–ª–∞–º –≤–∞—Ä–∏–∞–Ω—Ç–∞ 1 ----------
# –ú–∞—Ç—Ä–∏—Ü–∞ A[i,j] = (i! - j!) / i!
def A_func(i, j):
    i = i + 1  # –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å 1
    j = j + 1
    i_fact = np.vectorize(math.factorial)(i)
    j_fact = np.vectorize(math.factorial)(j)
    return (i_fact - j_fact) / i_fact

# –ú–∞—Ç—Ä–∏—Ü–∞ B[i,j] = (i - j) / (i + j)
def B_func(i, j):
    i = i + 1
    j = j + 1
    with np.errstate(divide='ignore', invalid='ignore'):
        result = (i - j) / (i + j)
        result[(i + j) == 0] = 0
    return result

# –†–∞–∑–º–µ—Ä—ã –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç—É 1:
# A ‚Äî 10x20, B ‚Äî 20x10
A = np.fromfunction(A_func, (10, 20), dtype=int)
B = np.fromfunction(B_func, (20, 10), dtype=int)

# ---------------- –û–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –∑–∞–¥–∞–Ω–∏—é ---------------- #

# 1. –í—ã—á–∏—Å–ª–∏—Ç–µ: A·µÄ –∏ B·µÄ
print("1. –¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ç—Ä–∏—Ü—ã A.T –∏ B.T:")
print("A.T:\n", A.T)
print("\nB.T:\n", B.T)

# 2. –í—ã—á–∏—Å–ª–∏—Ç–µ: A + B
print("\n2. A + B (–ø—Ä–∏–≤–æ–¥–∏–º –∫ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–º—É —Ä–∞–∑–º–µ—Ä—É 10x10):")
A_small = A[:, :10]
B_small = B[:10, :]
print(A_small + B_small)

# 3. –í—ã—á–∏—Å–ª–∏—Ç–µ: A - B
print("\n3. A - B:")
print(A_small - B_small)

# 4. –í—ã—á–∏—Å–ª–∏—Ç–µ: A * B –∏ B * A (–ø–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ)
print("\n4. A * B (–ø–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ):")
print(A_small * B_small)
print("\n4. B * A (–ø–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ):")
print(B_small * A_small)
print("\n4a. A @ B (–º–∞—Ç—Ä–∏—á–Ω–æ–µ —É–º–Ω–æ–∂–µ–Ω–∏–µ):")
print(A_small @ B_small)
print("\n4a. B @ A (–º–∞—Ç—Ä–∏—á–Ω–æ–µ —É–º–Ω–æ–∂–µ–Ω–∏–µ):")
print(B_small @ A_small)

# 5. –í—ã—á–∏—Å–ª–∏—Ç–µ: A / B –∏ B / A (–ø–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ)
print("\n5. A / B:")
print(np.divide(A_small, B_small, where=B_small!=0))
print("\n5. B / A:")
print(np.divide(B_small, A_small, where=A_small!=0))

# 6. –í—ã—á–∏—Å–ª–∏—Ç–µ: A // B –∏ B // A (—Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ)
print("\n6. A // B (—Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ):")
with np.errstate(divide='ignore', invalid='ignore'):
    result1 = np.floor_divide(A_small, B_small, where=B_small!=0)
    result1[B_small == 0] = 0
print(result1)

print("\n6. B // A (—Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ):")
with np.errstate(divide='ignore', invalid='ignore'):
    result2 = np.floor_divide(B_small, A_small, where=A_small!=0)
    result2[A_small == 0] = 0
print(result2)

# 7. –í—ã—á–∏—Å–ª–∏—Ç–µ A‚Åª¬π –∏ B‚Åª¬π
print("\n7. –û–±—Ä–∞—Ç–Ω—ã–µ –º–∞—Ç—Ä–∏—Ü—ã A‚Åª¬π –∏ B‚Åª¬π (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ –≤–µ—Ä—Å–∏–∏):")
A_square = A[:, :10]
B_square = B[:10, :]
try:
    A_inv = np.linalg.inv(A_square)
    B_inv = np.linalg.inv(B_square)
    print("A‚Åª¬π:\n", A_inv)
    print("\nB‚Åª¬π:\n", B_inv)
except np.linalg.LinAlgError:
    print("–ú–∞—Ç—Ä–∏—Ü—ã A –∏–ª–∏ B –Ω–µ –æ–±—Ä–∞—Ç–∏–º—ã")

# 8. –í—ã—á–∏—Å–ª–∏—Ç–µ: A * B‚Åª¬π –∏ B * A‚Åª¬π
print("\n8. A * B‚Åª¬π –∏ B * A‚Åª¬π:")
try:
    print("A * B‚Åª¬π:\n", A_square @ B_inv)
    print("\nB * A‚Åª¬π:\n", B_square @ A_inv)
except:
    print("–£–º–Ω–æ–∂–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑-–∑–∞ —Ñ–æ—Ä–º—ã –∏–ª–∏ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ—Å—Ç–∏")

# 9. –í—ã—á–∏—Å–ª–∏—Ç–µ 2A·µÄ - E, –≥–¥–µ E ‚Äî –µ–¥–∏–Ω–∏—á–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ 10x10
print("\n9. –í—ã—Ä–∞–∂–µ–Ω–∏–µ 2A·µÄ - E:")
E = np.identity(10)
print(2 * A_square.T - E)

# 10. –í—ã—á–∏—Å–ª–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ f(x) = x¬≥ - 7x¬≤ + 13x - 5 –¥–ª—è A –∏ B
def poly_f(x):
    return x @ x @ x - 7 * x @ x + 13 * x - 5 * np.identity(x.shape[0])

print("\n10. –ú–Ω–æ–≥–æ—á–ª–µ–Ω f(x) = x¬≥ - 7x¬≤ + 13x - 5 –æ—Ç A:")
try:
    print(poly_f(A_square))
except:
    print("–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ –æ—Ç A")

print("\n10. –ú–Ω–æ–≥–æ—á–ª–µ–Ω f(x) = x¬≥ - 7x¬≤ + 13x - 5 –æ—Ç B:")
try:
    print(poly_f(B_square))
except:
    print("–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ –æ—Ç B")

# 11. –í—ã—á–∏—Å–ª–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ 1 –∏ —Ñ—É–Ω–∫—Ü–∏–∏ 2 –∏–∑ –¢–∞–±–ª–∏—Ü—ã 2 –¥–ª—è –º–∞—Ç—Ä–∏—Ü A –∏ B
# –¢–∞–±–ª–∏—Ü–∞ 2, –í–∞—Ä–∏–∞–Ω—Ç 1:
# –§—É–Ω–∫—Ü–∏—è 1: y(x) = sin(3x)
# –§—É–Ω–∫—Ü–∏—è 2: y(x) = 2cos(x)

print("\n11. –§—É–Ω–∫—Ü–∏—è 1 (y = sin(3x)) –¥–ª—è –º–∞—Ç—Ä–∏—Ü—ã A:")
print(np.sin(3 * A_small))

print("\n11. –§—É–Ω–∫—Ü–∏—è 2 (y = 2cos(x)) –¥–ª—è –º–∞—Ç—Ä–∏—Ü—ã B:")
print(2 * np.cos(B_small))

# 12. –í—ã—á–∏—Å–ª–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ 3 –∏–∑ –¢–∞–±–ª–∏—Ü—ã 2, –ø—Ä–∏–Ω—è–≤:
# –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è ¬´—É¬ª ‚Äî —ç—Ç–æ –º–∞—Ç—Ä–∏—Ü–∞ A, –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è ¬´x¬ª ‚Äî —ç—Ç–æ –º–∞—Ç—Ä–∏—Ü–∞ B.
# –§–æ—Ä–º—É–ª–∞: Z(x, y) = (x! - y!) / x!

print("\n12. –§—É–Ω–∫—Ü–∏—è 3: Z(x, y) = (x! - y!) / x! –≥–¥–µ x = B, y = A:")

print("\n12. –§—É–Ω–∫—Ü–∏—è 3: Z(x, y) = (x! - y!) / x! –≥–¥–µ x = B, y = A:")

def factorial_safe(mat):
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–π"""
    mat_int = np.clip(mat.astype(int), 0, 170)  # —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª—ã >170 –Ω–µ —Å—á–∏—Ç–∞–µ–º
    return np.vectorize(math.factorial, otypes=[float])(mat_int)

try:
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
    print("A_small (–∫–∞–∫ y):\n", np.round(A_small, 2))
    print("B_small (–∫–∞–∫ x):\n", np.round(B_small, 2))

    # –°—á–∏—Ç–∞–µ–º —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª—ã
    x_fact = factorial_safe(B_small)
    y_fact = factorial_safe(A_small)

    with np.errstate(divide='ignore', invalid='ignore', over='ignore'):
        Z = (x_fact - y_fact) / x_fact
        Z[np.isnan(Z)] = 0
        Z[np.isinf(Z)] = 0
        Z = np.where(x_fact == 0, 0, Z)  # –∑–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0

    print("Z = (x! - y!) / x!:\n", np.round(Z, 3))

except Exception as e:
    print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ 3:", e)


